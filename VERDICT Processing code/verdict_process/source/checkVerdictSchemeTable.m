function [meetsRequirements, messg] = checkVerdictSchemeTable(tableData, scanner) 
% checkVerdictSchemeTable Check that a table meets certain requirements
%    [meetsRequirements, messg] = checkVerdictSchemeTable(tableData, scanner) checks 
%    that the input table meets the following requirements:
%    nbv (num bvalues) should be 5
%   - The table has nbv*4 rows and 7 columns
%   - There are exactly nbv rows where the first three columns all have the value 0
%   - For each of these nbv rows, the value in the fifth column is equal to scheme.DELTA
%     where scheme = bv2scheme(bv(irow),scanner)
%   - For each of these nbv rows, the value in the sixth column is equal to scheme,delta
%
%   Inputs:
%       tableData - the table to check (MATLAB table)
%       scanner   - scanner name
%
%   Outputs:
%       meetsRequirements  - boolean
%       messg - message
% 
% Initial version generated by MatGPT, edited by David Atkinson
%
% See Also readVerdictSchemeFile findVerdictSchemeFiles

meetsRequirements = true ;
messg = '';

toldeltas = 0.1e-3 ; % 0.1ms tolerance on delta and DELTA

% Define the array of bv values
bv = [90, 500, 1500, 2000, 3000];
nbv = length(bv) ;

% Check that the table has the correct size
if size(tableData, 1) ~= nbv*4  ||  size(tableData, 2) ~= 7
    meetsRequirements = false ;
    messg = [ messg, 'Input table must have nbv*4 rows and 7 columns. '];
end

% Find the rows where the first three columns are all 0
zeroRows = find(tableData{:, 1} == 0 & tableData{:, 2} == 0 & tableData{:, 3} == 0);

% Check that there are exactly nbv (5) such rows
if length(zeroRows) ~= nbv
    meetsRequirements = false ;
    messg = [ messg, 'Input table must have exactly nbv rows where the first three columns are all 0. '];
end

% Loop over the zero rows and check the fifth and sixth columns
for i = 1:length(zeroRows)
    irow = zeroRows(i);
    scheme = bv2scheme(bv(i), scanner); % !GPT got this wrong (used irow for index)
    if abs(tableData{irow, 5} - scheme.DELTA/1000 ) > toldeltas 
        meetsRequirements = false ;
        messg = sprintf('%s Value in fifth column (DELTA) of row %d is incorrect. ', messg, irow);
    end
    if abs(tableData{irow, 6} - scheme.delta/1000 ) > toldeltas 
        meetsRequirements = false ;
        messg = sprintf('%s Value in sixth column (delta) of row %d is incorrect. ', messg, irow);
    end
end


end